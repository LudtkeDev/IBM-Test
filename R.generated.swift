//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `EventDetailViewController`.
    static let eventDetailViewController = _R.storyboard.eventDetailViewController()
    /// Storyboard `EventListViewController`.
    static let eventListViewController = _R.storyboard.eventListViewController()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "EventDetailViewController", bundle: ...)`
    static func eventDetailViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.eventDetailViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "EventListViewController", bundle: ...)`
    static func eventListViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.eventListViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `ErrorView`.
    static let errorView = _R.nib._ErrorView()
    /// Nib `EventTableViewCell`.
    static let eventTableViewCell = _R.nib._EventTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ErrorView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.errorView) instead")
    static func errorView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.errorView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EventTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.eventTableViewCell) instead")
    static func eventTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.eventTableViewCell)
    }
    #endif

    static func errorView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ErrorView? {
      return R.nib.errorView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ErrorView
    }

    static func eventTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EventTableViewCell? {
      return R.nib.eventTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EventTableViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `EventTableViewCell`.
    static let eventTableViewCell: Rswift.ReuseIdentifier<EventTableViewCell> = Rswift.ReuseIdentifier(identifier: "EventTableViewCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.eventList` struct is generated, and contains static references to 1 localization keys.
    struct eventList {
      /// Value: Lista de eventos
      static let eventList = Rswift.StringResource(key: "eventList", tableName: "EventList", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Lista de eventos
      static func eventList(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eventList", tableName: "EventList", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "EventList", preferredLanguages: preferredLanguages) else {
          return "eventList"
        }

        return NSLocalizedString("eventList", tableName: "EventList", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.general` struct is generated, and contains static references to 2 localization keys.
    struct general {
      /// Value: Ocorreu um erro ao carregar o conteúdo. Por favor, tente novamente.
      static let requestError = Rswift.StringResource(key: "requestError", tableName: "General", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Tente novamente
      static let tryAgain = Rswift.StringResource(key: "tryAgain", tableName: "General", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Ocorreu um erro ao carregar o conteúdo. Por favor, tente novamente.
      static func requestError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("requestError", tableName: "General", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "General", preferredLanguages: preferredLanguages) else {
          return "requestError"
        }

        return NSLocalizedString("requestError", tableName: "General", bundle: bundle, comment: "")
      }

      /// Value: Tente novamente
      static func tryAgain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tryAgain", tableName: "General", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "General", preferredLanguages: preferredLanguages) else {
          return "tryAgain"
        }

        return NSLocalizedString("tryAgain", tableName: "General", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _ErrorView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ErrorView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ErrorView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ErrorView
      }

      fileprivate init() {}
    }

    struct _EventTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = EventTableViewCell

      let bundle = R.hostingBundle
      let identifier = "EventTableViewCell"
      let name = "EventTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EventTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EventTableViewCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try eventDetailViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try eventListViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct eventDetailViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let eventDetailViewController = StoryboardViewControllerResource<EventDetailViewController>(identifier: "EventDetailViewController")
      let name = "EventDetailViewController"

      func eventDetailViewController(_: Void = ()) -> EventDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: eventDetailViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.eventDetailViewController().eventDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'eventDetailViewController' could not be loaded from storyboard 'EventDetailViewController' as 'EventDetailViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct eventListViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = EventListViewController

      let bundle = R.hostingBundle
      let eventListViewController = StoryboardViewControllerResource<EventListViewController>(identifier: "EventListViewController")
      let name = "EventListViewController"

      func eventListViewController(_: Void = ()) -> EventListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: eventListViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.eventListViewController().eventListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'eventListViewController' could not be loaded from storyboard 'EventListViewController' as 'EventListViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
